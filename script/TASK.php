<?php

namespace Scripts;

use ErrorException;
use Scripts\Interfaces\BDQuests;
use Throwable;

class TASK
{
    private BDQuests $BD;
    // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    private $url = "http://executecode/index.php/";

    public function __construct(BDQuests $BD)
    {
        $this->BD = $BD;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ json –º–µ—Ç–æ–¥–æ–º post –∏ –ø–æ–ª—É—á–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    private function sendPostRequest($data)
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cURL
        $ch = curl_init($this->url);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ cURL
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        curl_setopt($ch, CURLOPT_POST, true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ POST
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json', // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
            'Content-Length: ' . strlen(json_encode($data))
        ]);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data)); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        $response = curl_exec($ch);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        if (curl_errno($ch)) {
            echo '–û—à–∏–±–∫–∞ cURL: ' . curl_error($ch);
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ cURL
        curl_close($ch);

        return $response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ json –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ post –∑–∞–ø—Ä–æ—Å–∞
    private function callFunction($function, array $args, $functionBody): bool|string
    {
        $data = [
            'functionName' => $function,
            'arguments' => $args,
            'functionBody' => $functionBody
        ];

        return $this->sendPostRequest($data);
    }

    //–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∞–º –ø–æ–ª—è function_test
    private function getArrayForTesting($input): array
    {
        // –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
        $dataSets = explode(';', $input);
        $result = [];

        foreach ($dataSets as $dataSet) {
            // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            $dataSet = trim($dataSet);

            // –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–≤–µ—Ç –ø–æ —Ç–æ—á–∫–µ
            list($arguments, $resultValue) = explode('.', $dataSet);

            // –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            $argumentsArray = array_map('trim', explode(',', $arguments));

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∏–≤
            $result[] = [
                'arguments' => $argumentsArray,
                'result' => trim($resultValue)
            ];
        }

        return $result;
    }

    //–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    public function addTask()
    {
        if (
            !isset($_POST['name_task'])
            || !isset($_POST['body_task'])
            || !isset($_POST['task_answer'])
            || !isset($_POST['type'])
            || !isset($_POST['function_name'])
            || !isset($_POST['function_test'])
            || !isset($_POST['arguments_function'])
        ) {
            return;
        }

        return $this->BD->setTaskToTable(
        ) ? "<h2 class='sucsess text-center'>–î–æ–±–∞–≤–ª–µ–Ω–æ</h2>" : "<h2 class='error text-center'>–û—à–∏–±–∫–∞</h2>";
    }

    //–°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
    public function listCompletedTasks($user_id = null): string
    {
        $listCompletedTasks = $this->BD->getCompletedCode($user_id);
        $ans = '';

        foreach ($listCompletedTasks as $task) {
            $ans .= "
            <div class='review-text'>
                <pre><code>" . trim($task['code']) . "</code></pre>
            </div>";

            if (!is_null($user_id)) {
                $ans .= "
            <div class='like-button'>
                <span class=''>–¢–µ–º–∞ –∑–∞–¥–∞–Ω–∏—è: </span>
                <span class='themeCompletedTask'>" . $task['name_task'] . "</span>
                <span class='like-count ml-auto'>üëç " . ($task['likes'] = null ? "0" : $task['likes']) . "</span>
            </div>";

                continue;
            }
            $ans .= "
            <div class='like-button'>
                <span class='like-count ml-auto'>üëç " . ($task['likes'] = null ? "0" : $task['likes']) . "</span>
                " . (!isset($_SESSION['user_data']) ? '' : "<form method='POST' action=''>
                    <input type='hidden' name='link' value='quests'>
                    <button type='submit' class='btn btn-primary' name='like' value='" . $task['id'] . "'>–õ–∞–π–∫</button>
                </form>") . "
            </div>";
        }
        return $ans;
    }

    //–õ–∞–π–∫ —Ä–µ—à–µ–Ω–∏—è
    public function setLike(): void
    {
        if (!isset($_POST['like']) || !isset($_SESSION['user_data'])) {
            return;
        }

        if (!$this->BD->setLikeQuery()) {
            echo "–û—à–∏–±–∫–∞";
        }
    }

    //–í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è
    public function listQuestsToComplete(): void
    {
        if (
            !isset($_POST['link'])
            || $_POST['link'] !== 'quests'
            || !isset($_POST['task_id'])
        ) {
            return;
        }

        $_SESSION['task_id'] = $_POST['task_id'];
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ input —Å –∫–æ–¥–æ–º
    public function checkCode($code): bool
    {
        if (empty($code)) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            return false;
        }

        if (!strpos($code, 'function')) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ function
            return false;
        }

        return true;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    public function testCodeUser(): string
    {
        $addRating = 5;
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞–Ω–∏–∏
        $result = $this->BD->getQuest($_SESSION['task_id']);

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥–∞
        $code = $_POST['code'];


        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            if (preg_match(
                '/function\s+' . $result['function_name'] . '\s*\([^)]*\)\s*:\s*' . $result['type'] . '\s*\{[^}]*\}/',
                $code,
                $matches
            )) {
                $safeCode = $matches[0];
            } else {
                throw new ErrorException("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è " . $result['function_name']);
            }
            //eval($safeCode);

            if ($result['function_test']) { // –ï—Å–ª–∏ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ >0
                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
                // tests = Array [
                //          'arguments' => $argumentsArray,
                //          'result' => trim($resultValue)
                //          ];
                $tests = $this->getArrayForTesting($result["function_test"]);


                foreach ($tests as $test) {
                    if ($this->callFunction(
                            $result['function_name'],
                            $test['arguments'],
                            $safeCode
                        ) != $test['result']) {
                        throw new ErrorException(
                            '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã! –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è—Ö ' . print_r(
                                $test['arguments'],
                                true
                            ) . '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ' . $test['result'] . ". –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–≤–µ–Ω: " . $this->callFunction(
                                $result['function_name'],
                                $test['arguments'],
                                $safeCode
                            )
                        );
                    }
                }
            } elseif ($result['function_name']() != $result['answer_task']) { // –ï—Å–ª–∏ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ 0
                throw new ErrorException(
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã! –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: ' . $result['function_name'](
                    )
                );
            }
            $answer = "<h2 class='sucsess' style='color: green;'>–£—Å–ø–µ—Ö!</h2> <pre class='bg-light p-3 border'>–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! <br><br>–¢–∞–∫–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã</pre>";

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if (isset($_SESSION['user_data']['user_id'])) {
                //$this->BD->setCompletedCodeToTable(); // –ó–∞–ø–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                $this->BD->setRaitingUserOnComplete($addRating); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                $_SESSION['user_data']['user_raiting'] += $addRating;
            }
        } catch (Throwable $e) {
            $answer = "<h2 class='error'>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h2> <pre class='bg-light p-3 border'>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: <br>" . $e->getMessage(
                ) . "</pre>";
        }

        // –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
        return "<div class='m-auto' style='width: 70%'>" . $answer . "</div>";
    }

    public function runCodeUser($safeCode, $functionName): mixed
    {
        $url = 'http://0.0.0.0:8080/script/execute.php'; // –£–∫–∞–∂–∏—Ç–µ IP –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

        $data = [
            'code' => $safeCode,
            'function' => $functionName
        ];

        $options = [
            'http' => [
                'header' => "Content-type: application/x-www-form-urlencoded\r\n",
                'method' => 'POST',
                'content' => http_build_query($data),
            ],
        ];

        $context = stream_context_create($options);
        $result = file_get_contents($url, false, $context);

        return json_decode($result, true);
    }
}